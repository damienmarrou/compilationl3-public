Package sc;

Helpers
    lettre = [['a' .. 'z'] + ['A' .. 'Z']];
    entier = ['0'..'9'];

Tokens
//Type de variable
    typeentier = 'entier ';

//symboles logique et arithmetique
    plus   = '+';
    moins  = '-';
    multi  = '*';
    div    = '/';
    inf    = '<';
    egal   = '=';
    et     = '&';
    ou     = '|';
    non    = '!';

//symbole de syntaxe
    crocheto     = '[';
    crochetf     = ']';
    accoladeo    = '{';
    accoladef    = '}';
    parentheseo  = '(';
    parenthesef  = ')';
    pointvirgule = ';';
    virgule = ',';
    espaces      = (' ' | 13 | 10)+;

//symbole de fonction
    si      = 'si';
    alors   = 'alors';
    sinon   = 'sinon';
    retour  = 'retour';
    tantque = 'tantque';
    faire   = 'faire';

    fonction = 'fonction';
    commentaire = '#' [[0 .. 0xffff] - [10 + 13]]* (10 | 13 | 10 13);

    nombre = entier+;
    nom = lettre;

Ignored Tokens
    espaces, commentaire;

Productions
    /* listedecfonc*/
    programme =  deffonction  ;

    nomvar = {nom} nom nomvar | {lettre} nom;

    optdecvar = {decvar_e} decvar_e optdecvar | {rien};
    decvar_e  = {decvar} decvar | {dectab} dectab;
    decvar    =  typeentier nomvar pointvirgule;
    dectab    =  typeentier nomvar crocheto expr crochetf pointvirgule;

    deffonction    =  nomvar parentheseo deffonctionarg parenthesef  optdecvar bloc;
    deffonctionarg = {deffonctionarg} fonctionarg virgule deffonctionarg |{rien};
    fonctionarg    = {entier} ent | {tab} tab;
    ent = typeentier nomvar;
    tab = typeentier nomvar crocheto expr crochetf;

    listinstr = {list} instr listinstr |{rien};
    instr     = {affectation} affectation | {bloc} bloc|  {tantque} instrtantque | {si} instrsi |{retour} instrretour;

    instrtantque = tantque expr faire bloc;
    instrretour  = retour expr pointvirgule;
    instrsi      = {sisinon} si expr alors bloc instrsinon | {si} si expr alors bloc;
    instrsinon   = sinon bloc;

    bloc = accoladeo listinstr accoladef;

    affectation = {rien} | {affect} nomvar egal expr pointvirgule affectation ;

    expr = {ou}    expr  ou expr2    | {expr2} expr2;
    expr2= {et}    expr2 et expr3    | {expr3} expr3;
    expr3= {egal}  expr3 egal expr4  | {inf}   expr3 inf   expr4     | {expr4} expr4;
    expr4= {plus}  expr4 plus expr5  | {moins} expr4 moins expr5     | {expr5} expr5;
    expr5= {multi} expr5 multi expr6 | {div}   expr5 div   expr6     | {expr6} expr6;
    expr6= {non}   non   expr7       | {part2} expr7;
    expr7= {part1} parentheseo expr parenthesef | {parti2} nomvar | {part3} nombre| {part4} nom crocheto  nombre crochetf | deffonction |{rien};
