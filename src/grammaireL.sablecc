Package sc;


Helpers
 lettre = [['a' .. 'z'] + ['A' .. 'Z']];
 entier = ['0'..'9'];

Tokens


 typeentier = 'entier ';

 plus   = '+';
 moins  = '-';
 multi  = '*';
 div    = '/';
 inf    = '<';
 egal   = '=';
 et     = '&';
 ou     = '|';
 non    = '!';

 crocheto     = '[';
 crochetf     = ']';
 accoladeo    = '{';
 accoladef    = '}';
 parentheseo  = '(';
 parenthesef  = ')';
 pointvirgule = ';';
 virgule = ',';
 espaces      = (' ' | 13 | 10)+;

 si      = 'si';
 alors   = 'alors';
 sinon   = 'sinon';
 retour  = 'retour';
 tantque = 'tantque';
 faire   = 'faire';

 fonction = 'fonction';
 commentaire = '#' [[0 .. 0xffff] - [10 + 13]]* (10 | 13 | 10 13);

 nombre = entier+;
 nom = lettre+;


Ignored Tokens
 espaces, commentaire;

Productions
 /* listedecfonc*/
 programme =  deffonction   ;

 optdecvar = {decvar_e} decvar_e | {listarg} decvar_e virgule optdecvar | {rien};

 decvar_e = {decvar} decvar | {dectab} dectab;
 decvar =  typeentier nom pointvirgule;
 dectab =  typeentier nom crocheto expr crochetf pointvirgule;



 deffonction = nom parentheseo optdecvar parenthesef bloc;


 instr = {affectation} affectation | {bloc} bloc|  {tantque} instrtantque | {si} instrsi |{retour} instrretour ;

 instrtantque = tantque expr faire bloc;

 instrretour = retour expr pointvirgule;

 instrsi = {sisinon} si expr alors bloc instrsinon | {si} si expr alors bloc;
 instrsinon = sinon bloc;

 bloc = accoladeo instr accoladef;

 affectation = {rien} | {affect} nom egal expr pointvirgule affectation ;

  expr = {ou} expr ou expr2        | {expr2} expr2;
  expr2= {et} expr2 et expr3       | {expr3} expr3;
  expr3= {egal} expr3 egal expr4   | {inf} expr3 inf expr4     | {expr4} expr4;
  expr4= {plus} expr4 plus expr5   | {moins} expr4 moins expr5 | {expr5} expr5;
  expr5= {multi} expr5 multi expr6 | {div} expr5 div expr6     | {expr6} expr6;
  expr6= {non} non expr7           | {part2} expr7;
  expr7= {part1} parentheseo expr parenthesef | {parti2} nom | {part3} nombre| {part4} nom crocheto  nombre crochetf; /*|fonction ;*/