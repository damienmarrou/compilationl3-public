Package sc;

Helpers
    lettre = [['a' .. 'z'] + ['A' .. 'Z']];
    entier = ['0'..'9'];
    premierelettre = ['a' .. 'z'] | ['A' .. 'Z'] | '_' |'$';
    autreslettres = ['a' .. 'z'] | ['A' .. 'Z'] | '_' | '$' | ['0'..'9'];

Tokens
//Type de variable
    typeentier = 'entier ';

//symboles logique et arithmetique
    plus   = '+';
    moins  = '-';
    multi  = '*';
    div    = '/';
    inf    = '<';
    egal   = '=';
    et     = '&';
    ou     = '|';
    non    = '!';

//symbole de syntaxe
    crocheto     = '[';
    crochetf     = ']';
    accoladeo    = '{';
    accoladef    = '}';
    parentheseo  = '(';
    parenthesef  = ')';
    pointvirgule = ';';
    virgule = ',';
    espaces      = (' ' | 13 | 10)+;

//symbole de fonction
    si      = 'si';
    alors   = 'alors';
    sinon   = 'sinon';
    retour  = 'retour';
    tantque = 'tantque';
    faire   = 'faire';
    lire    = 'lire';
    ecrire  = 'ecrire';

    fonction = 'fonction';
    commentaire = '#' [[0 .. 0xffff] - [10 + 13]]* (10 | 13 | 10 13);

    nom = premierelettre+ autreslettres*;
    nombre = entier+;

Ignored Tokens
    espaces, commentaire;

Productions
    /* listedecfonc*/
    programme = decvar deffonction*  ;

    //nomvar = {nom} nom nomvar | {lettre} nom;


    decvar = {multiple} varsimple varmultiple* pointvirgule|{rien};
    varsimple = {entier} varent |{tab} vartab;
        varent = typeentier nom;
        vartab = typeentier nom crocheto expr crochetf;
    varmultiple = virgule varsimple ;//varmultiple|{rien};

    fctdecvar = {multiple} varsimple varmultiple*|{rien};
    fctvarmultiple = virgule varsimple ;//fctvarmultiple|{rien};

   /* optdecvar = {simple} decvar_epv |{multiple}  decvarmul optdecvar | {rien};
    decvarmul = virgule decvar_e;
    decvar_e = {decvar} decvar | {dectab} dectab;
    decvar = typeentier nom;
    dectab = typeentier nom crocheto expr crochetf;
    decvar_epv  = {decvar} decvarpv | {dectab} dectabpv;
    decvarpv    =  typeentier nom pointvirgule;
    dectabpv    =  typeentier nom crocheto expr crochetf pointvirgule;
*/
    deffonction    =  nom parentheseo fctdecvar parenthesef  decvar bloc;
    /*deffonctionarg = {simple} fonctionargsimple | {multiple} fonctionarg args deffonctionarg;
    args = virgule fonctionarg;
    fonctionarg    = {entier} ent | {tab} tab ;//| {appel} fonctionappel ;
    fonctionargsimple    = {entier} ent | {tab} tab |{rien} ;//| {appel} fonctionappel ;
    ent = typeentier nom;
    tab = typeentier nom crocheto expr crochetf;*/

    listinstr = {list} instr listinstr |{rien} ;
    instr     = {affectation} affectationbloc | {bloc} bloc |  {tantque} instrtantque | {si} instrsi |
    {retour} instrretour | {ecrire} fonctionecrire |{vide} instrvide;

    instrtantque = tantque expr faire bloc;
    instrretour  = retour expr pointvirgule;
    instrsi      = {sisinon} si expr alors bloc instrsinon | {si} si expr alors bloc;
    instrsinon   = sinon bloc;
    instrvide    = pointvirgule;
    bloc = accoladeo listinstr accoladef;

    affectation = {rien} | {affect} nom egal expr pointvirgule affectation;
    affectationbloc = nom egal expr pointvirgule;
    expr = {ou}    expr  ou expr2    | {expr2} expr2;
    expr2= {et}    expr2 et expr3    | {expr3} expr3;
    expr3= {egal}  expr3 egal expr4  | {inf}   expr3 inf   expr4     | {expr4} expr4;
    expr4= {plus}  expr4 plus expr5  | {moins} expr4 moins expr5     | {expr5} expr5;
    expr5= {multi} expr5 multi expr6 | {div}   expr5 div   expr6     | {expr6} expr6;
    expr6= {non}   non   expr7       | {part2} expr7;
    expr7= {exprentreparentheses} parentheseo expr parenthesef  | {nomvar} nom   | {part3} nombre| {lire} fonctionlire |
           {tab} nom crocheto  nombre crochetf | {fonction} deffonction       /*| {appel} fonctionappel */|{rien};

    fonctionecrire = ecrire parentheseo expr parenthesef pointvirgule;

   /* fonctionappel = {appelavecpv}nom parentheseo listargappel parenthesef pointvirgule |{appelsanspv} nom parentheseo listargappel parenthesef;
    listargappel = {liste}nom virgule listargappel|{rien};*/

    fonctionlire = {simple}lire parentheseo parenthesef;
