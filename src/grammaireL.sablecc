Package sc;

Helpers
    lettre = [['a' .. 'z'] + ['A' .. 'Z']];
    entier = ['0'..'9'];
    premierelettre = ['a' .. 'z'] | ['A' .. 'Z'] | '_' |'$';
    autreslettres  = ['a' .. 'z'] | ['A' .. 'Z'] | '_' | '$' | ['0'..'9'];

Tokens
//Type de variable
    typeentier = 'entier ';

//symboles logique et arithmetique
    plus   = '+';
    moins  = '-';
    multi  = '*';
    div    = '/';
    inf    = '<';
    egal   = '=';
    et     = '&';
    ou     = '|';
    non    = '!';

//symbole de syntaxe
    crocheto     = '[';
    crochetf     = ']';
    accoladeo    = '{';
    accoladef    = '}';
    parentheseo  = '(';
    parenthesef  = ')';
    pointvirgule = ';';
    virgule      = ',';
    espaces      = (' ' | 13 | 10)+;

//symbole de fonction
    si      = 'si';
    alors   = 'alors';
    sinon   = 'sinon';
    retour  = 'retour';
    tantque = 'tantque';
    faire   = 'faire';
    lire    = 'lire';
    ecrire  = 'ecrire';

    fonction = 'fonction';
    commentaire = '#' [[0 .. 0xffff] - [10 + 13]]* (10 | 13 | 10 13);

    nombre = entier+;
    nom    = premierelettre+ autreslettres*;

Ignored Tokens
    espaces, commentaire;

Productions
    /* listedecfonc*/
    programme = decvar2 deffonction2;


    decvar      = {multiple} varsimple varmultiple pointvirgule;
    varsimple   = {entier} varent |{tab} vartab;
        varent  = typeentier nom;
        vartab  = typeentier nom crocheto expr crochetf;
    varmultiple = virgule varsimple varmultiple|{rien};

    fctdecvar      = {multiple} varsimple varmultiple;
    fctvarmultiple = virgule varsimple fctvarmultiple|{rien};

    deffonction2 = {fonc} deffonction deffonction2|{rien};
    deffonction  = {args}nom parentheseo fctdecvar parenthesef  decvar2 bloc |{sansarg} nom parentheseo  parenthesef  decvar2 bloc ;
    decvar2      = {rien}|{var} decvar;
    listinstr    = {list} instr listinstr | {rien} ;
    instr        = {affectation} affect   | {bloc} bloc |  {tantque} instrtantque | {si} instrsi |
                   {retour} instrretour   | {ecrire} fonctionecrire ;

    instrtantque = tantque expr faire bloc;
    instrretour  = retour expr pointvirgule;
    instrsi      = {sisinon} si expr alors bloc instrsinon | {si} si expr alors bloc;
    instrsinon   = sinon bloc;
    bloc         = accoladeo listinstr accoladef;

    affect   = variable egal expr pointvirgule;
    variable = {simple} nom | {tab} nom crocheto expr crochetf;

    expr = {ou}    expr  ou expr2    | {expr2} expr2;
    expr2= {et}    expr2 et expr3    | {expr3} expr3;
    expr3= {egal}  expr3 egal expr4  | {inf}   expr3 inf   expr4     | {expr4} expr4;
    expr4= {plus}  expr4 plus expr5  | {moins} expr4 moins expr5     | {expr5} expr5;
    expr5= {multi} expr5 multi expr6 | {div}   expr5 div   expr6     | {expr6} expr6;
    expr6= {non}   non   expr7       | {part2} expr7;
    expr7= {exprentreparentheses} parentheseo expr parenthesef  | {nomvar} nom   | {nombre} nombre| {lire} fonctionlire |
           {tab} nom crocheto  nombre crochetf | {fonction} deffonction | {appel} fonctionappel;

    fonctionecrire = ecrire parentheseo expr parenthesef pointvirgule;

    fonctionappel = nom  parentheseo appelexpr parenthesef;
    appelexpr     = expr listeexpr;
    listeexpr     = virgule expr;

    fonctionlire  = lire parentheseo parenthesef;