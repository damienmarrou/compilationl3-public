/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class AInfExpr3 extends PExpr3
{
    private PExpr3 _expr3_;
    private TInf _inf_;
    private PExpr4 _expr4_;

    public AInfExpr3()
    {
        // Constructor
    }

    public AInfExpr3(
        @SuppressWarnings("hiding") PExpr3 _expr3_,
        @SuppressWarnings("hiding") TInf _inf_,
        @SuppressWarnings("hiding") PExpr4 _expr4_)
    {
        // Constructor
        setExpr3(_expr3_);

        setInf(_inf_);

        setExpr4(_expr4_);

    }

    @Override
    public Object clone()
    {
        return new AInfExpr3(
            cloneNode(this._expr3_),
            cloneNode(this._inf_),
            cloneNode(this._expr4_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAInfExpr3(this);
    }

    public PExpr3 getExpr3()
    {
        return this._expr3_;
    }

    public void setExpr3(PExpr3 node)
    {
        if(this._expr3_ != null)
        {
            this._expr3_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr3_ = node;
    }

    public TInf getInf()
    {
        return this._inf_;
    }

    public void setInf(TInf node)
    {
        if(this._inf_ != null)
        {
            this._inf_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._inf_ = node;
    }

    public PExpr4 getExpr4()
    {
        return this._expr4_;
    }

    public void setExpr4(PExpr4 node)
    {
        if(this._expr4_ != null)
        {
            this._expr4_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._expr4_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._expr3_)
            + toString(this._inf_)
            + toString(this._expr4_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._expr3_ == child)
        {
            this._expr3_ = null;
            return;
        }

        if(this._inf_ == child)
        {
            this._inf_ = null;
            return;
        }

        if(this._expr4_ == child)
        {
            this._expr4_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._expr3_ == oldChild)
        {
            setExpr3((PExpr3) newChild);
            return;
        }

        if(this._inf_ == oldChild)
        {
            setInf((TInf) newChild);
            return;
        }

        if(this._expr4_ == oldChild)
        {
            setExpr4((PExpr4) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
