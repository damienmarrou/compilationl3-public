/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class AFonctionappel extends PFonctionappel
{
    private TNom _nom_;
    private TParentheseo _parentheseo_;
    private PAppelexpr _appelexpr_;
    private TParenthesef _parenthesef_;

    public AFonctionappel()
    {
        // Constructor
    }

    public AFonctionappel(
        @SuppressWarnings("hiding") TNom _nom_,
        @SuppressWarnings("hiding") TParentheseo _parentheseo_,
        @SuppressWarnings("hiding") PAppelexpr _appelexpr_,
        @SuppressWarnings("hiding") TParenthesef _parenthesef_)
    {
        // Constructor
        setNom(_nom_);

        setParentheseo(_parentheseo_);

        setAppelexpr(_appelexpr_);

        setParenthesef(_parenthesef_);

    }

    @Override
    public Object clone()
    {
        return new AFonctionappel(
            cloneNode(this._nom_),
            cloneNode(this._parentheseo_),
            cloneNode(this._appelexpr_),
            cloneNode(this._parenthesef_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAFonctionappel(this);
    }

    public TNom getNom()
    {
        return this._nom_;
    }

    public void setNom(TNom node)
    {
        if(this._nom_ != null)
        {
            this._nom_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._nom_ = node;
    }

    public TParentheseo getParentheseo()
    {
        return this._parentheseo_;
    }

    public void setParentheseo(TParentheseo node)
    {
        if(this._parentheseo_ != null)
        {
            this._parentheseo_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parentheseo_ = node;
    }

    public PAppelexpr getAppelexpr()
    {
        return this._appelexpr_;
    }

    public void setAppelexpr(PAppelexpr node)
    {
        if(this._appelexpr_ != null)
        {
            this._appelexpr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._appelexpr_ = node;
    }

    public TParenthesef getParenthesef()
    {
        return this._parenthesef_;
    }

    public void setParenthesef(TParenthesef node)
    {
        if(this._parenthesef_ != null)
        {
            this._parenthesef_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parenthesef_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._nom_)
            + toString(this._parentheseo_)
            + toString(this._appelexpr_)
            + toString(this._parenthesef_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._nom_ == child)
        {
            this._nom_ = null;
            return;
        }

        if(this._parentheseo_ == child)
        {
            this._parentheseo_ = null;
            return;
        }

        if(this._appelexpr_ == child)
        {
            this._appelexpr_ = null;
            return;
        }

        if(this._parenthesef_ == child)
        {
            this._parenthesef_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._nom_ == oldChild)
        {
            setNom((TNom) newChild);
            return;
        }

        if(this._parentheseo_ == oldChild)
        {
            setParentheseo((TParentheseo) newChild);
            return;
        }

        if(this._appelexpr_ == oldChild)
        {
            setAppelexpr((PAppelexpr) newChild);
            return;
        }

        if(this._parenthesef_ == oldChild)
        {
            setParenthesef((TParenthesef) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
