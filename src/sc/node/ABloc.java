/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class ABloc extends PBloc
{
    private TAccoladeo _accoladeo_;
    private PListinstr _listinstr_;
    private TAccoladef _accoladef_;

    public ABloc()
    {
        // Constructor
    }

    public ABloc(
        @SuppressWarnings("hiding") TAccoladeo _accoladeo_,
        @SuppressWarnings("hiding") PListinstr _listinstr_,
        @SuppressWarnings("hiding") TAccoladef _accoladef_)
    {
        // Constructor
        setAccoladeo(_accoladeo_);

        setListinstr(_listinstr_);

        setAccoladef(_accoladef_);

    }

    @Override
    public Object clone()
    {
        return new ABloc(
            cloneNode(this._accoladeo_),
            cloneNode(this._listinstr_),
            cloneNode(this._accoladef_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseABloc(this);
    }

    public TAccoladeo getAccoladeo()
    {
        return this._accoladeo_;
    }

    public void setAccoladeo(TAccoladeo node)
    {
        if(this._accoladeo_ != null)
        {
            this._accoladeo_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._accoladeo_ = node;
    }

    public PListinstr getListinstr()
    {
        return this._listinstr_;
    }

    public void setListinstr(PListinstr node)
    {
        if(this._listinstr_ != null)
        {
            this._listinstr_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._listinstr_ = node;
    }

    public TAccoladef getAccoladef()
    {
        return this._accoladef_;
    }

    public void setAccoladef(TAccoladef node)
    {
        if(this._accoladef_ != null)
        {
            this._accoladef_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._accoladef_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._accoladeo_)
            + toString(this._listinstr_)
            + toString(this._accoladef_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._accoladeo_ == child)
        {
            this._accoladeo_ = null;
            return;
        }

        if(this._listinstr_ == child)
        {
            this._listinstr_ = null;
            return;
        }

        if(this._accoladef_ == child)
        {
            this._accoladef_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._accoladeo_ == oldChild)
        {
            setAccoladeo((TAccoladeo) newChild);
            return;
        }

        if(this._listinstr_ == oldChild)
        {
            setListinstr((PListinstr) newChild);
            return;
        }

        if(this._accoladef_ == oldChild)
        {
            setAccoladef((TAccoladef) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
