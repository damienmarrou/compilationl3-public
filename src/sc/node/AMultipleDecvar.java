/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class AMultipleDecvar extends PDecvar
{
    private PVarsimple _varsimple_;
    private PVarmultiple _varmultiple_;
    private TPointvirgule _pointvirgule_;

    public AMultipleDecvar()
    {
        // Constructor
    }

    public AMultipleDecvar(
        @SuppressWarnings("hiding") PVarsimple _varsimple_,
        @SuppressWarnings("hiding") PVarmultiple _varmultiple_,
        @SuppressWarnings("hiding") TPointvirgule _pointvirgule_)
    {
        // Constructor
        setVarsimple(_varsimple_);

        setVarmultiple(_varmultiple_);

        setPointvirgule(_pointvirgule_);

    }

    @Override
    public Object clone()
    {
        return new AMultipleDecvar(
            cloneNode(this._varsimple_),
            cloneNode(this._varmultiple_),
            cloneNode(this._pointvirgule_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAMultipleDecvar(this);
    }

    public PVarsimple getVarsimple()
    {
        return this._varsimple_;
    }

    public void setVarsimple(PVarsimple node)
    {
        if(this._varsimple_ != null)
        {
            this._varsimple_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._varsimple_ = node;
    }

    public PVarmultiple getVarmultiple()
    {
        return this._varmultiple_;
    }

    public void setVarmultiple(PVarmultiple node)
    {
        if(this._varmultiple_ != null)
        {
            this._varmultiple_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._varmultiple_ = node;
    }

    public TPointvirgule getPointvirgule()
    {
        return this._pointvirgule_;
    }

    public void setPointvirgule(TPointvirgule node)
    {
        if(this._pointvirgule_ != null)
        {
            this._pointvirgule_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._pointvirgule_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._varsimple_)
            + toString(this._varmultiple_)
            + toString(this._pointvirgule_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._varsimple_ == child)
        {
            this._varsimple_ = null;
            return;
        }

        if(this._varmultiple_ == child)
        {
            this._varmultiple_ = null;
            return;
        }

        if(this._pointvirgule_ == child)
        {
            this._pointvirgule_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._varsimple_ == oldChild)
        {
            setVarsimple((PVarsimple) newChild);
            return;
        }

        if(this._varmultiple_ == oldChild)
        {
            setVarmultiple((PVarmultiple) newChild);
            return;
        }

        if(this._pointvirgule_ == oldChild)
        {
            setPointvirgule((TPointvirgule) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
