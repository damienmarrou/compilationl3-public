/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import java.util.*;
import sc.analysis.*;

@SuppressWarnings("nls")
public final class AProgramme extends PProgramme
{
    private final LinkedList<PDecvar> _decvar_ = new LinkedList<PDecvar>();
    private final LinkedList<PDeffonction> _deffonction_ = new LinkedList<PDeffonction>();

    public AProgramme()
    {
        // Constructor
    }

    public AProgramme(
        @SuppressWarnings("hiding") List<?> _decvar_,
        @SuppressWarnings("hiding") List<?> _deffonction_)
    {
        // Constructor
        setDecvar(_decvar_);

        setDeffonction(_deffonction_);

    }

    @Override
    public Object clone()
    {
        return new AProgramme(
            cloneList(this._decvar_),
            cloneList(this._deffonction_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAProgramme(this);
    }

    public LinkedList<PDecvar> getDecvar()
    {
        return this._decvar_;
    }

    public void setDecvar(List<?> list)
    {
        for(PDecvar e : this._decvar_)
        {
            e.parent(null);
        }
        this._decvar_.clear();

        for(Object obj_e : list)
        {
            PDecvar e = (PDecvar) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._decvar_.add(e);
        }
    }

    public LinkedList<PDeffonction> getDeffonction()
    {
        return this._deffonction_;
    }

    public void setDeffonction(List<?> list)
    {
        for(PDeffonction e : this._deffonction_)
        {
            e.parent(null);
        }
        this._deffonction_.clear();

        for(Object obj_e : list)
        {
            PDeffonction e = (PDeffonction) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._deffonction_.add(e);
        }
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._decvar_)
            + toString(this._deffonction_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._decvar_.remove(child))
        {
            return;
        }

        if(this._deffonction_.remove(child))
        {
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        for(ListIterator<PDecvar> i = this._decvar_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PDecvar) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        for(ListIterator<PDeffonction> i = this._deffonction_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PDeffonction) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        throw new RuntimeException("Not a child.");
    }
}
