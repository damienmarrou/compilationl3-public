/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import sc.analysis.*;

@SuppressWarnings("nls")
public final class AProgramme extends PProgramme
{
    private PDecvar2 _decvar2_;
    private PDeffonction2 _deffonction2_;

    public AProgramme()
    {
        // Constructor
    }

    public AProgramme(
        @SuppressWarnings("hiding") PDecvar2 _decvar2_,
        @SuppressWarnings("hiding") PDeffonction2 _deffonction2_)
    {
        // Constructor
        setDecvar2(_decvar2_);

        setDeffonction2(_deffonction2_);

    }

    @Override
    public Object clone()
    {
        return new AProgramme(
            cloneNode(this._decvar2_),
            cloneNode(this._deffonction2_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAProgramme(this);
    }

    public PDecvar2 getDecvar2()
    {
        return this._decvar2_;
    }

    public void setDecvar2(PDecvar2 node)
    {
        if(this._decvar2_ != null)
        {
            this._decvar2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._decvar2_ = node;
    }

    public PDeffonction2 getDeffonction2()
    {
        return this._deffonction2_;
    }

    public void setDeffonction2(PDeffonction2 node)
    {
        if(this._deffonction2_ != null)
        {
            this._deffonction2_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._deffonction2_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._decvar2_)
            + toString(this._deffonction2_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._decvar2_ == child)
        {
            this._decvar2_ = null;
            return;
        }

        if(this._deffonction2_ == child)
        {
            this._deffonction2_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._decvar2_ == oldChild)
        {
            setDecvar2((PDecvar2) newChild);
            return;
        }

        if(this._deffonction2_ == oldChild)
        {
            setDeffonction2((PDeffonction2) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
