/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.node;

import java.util.*;
import sc.analysis.*;

@SuppressWarnings("nls")
public final class AArgsDeffonction extends PDeffonction
{
    private TNom _nom_;
    private TParentheseo _parentheseo_;
    private PFctdecvar _fctdecvar_;
    private TParenthesef _parenthesef_;
    private final LinkedList<PDecvar> _decvar_ = new LinkedList<PDecvar>();
    private PBloc _bloc_;

    public AArgsDeffonction()
    {
        // Constructor
    }

    public AArgsDeffonction(
        @SuppressWarnings("hiding") TNom _nom_,
        @SuppressWarnings("hiding") TParentheseo _parentheseo_,
        @SuppressWarnings("hiding") PFctdecvar _fctdecvar_,
        @SuppressWarnings("hiding") TParenthesef _parenthesef_,
        @SuppressWarnings("hiding") List<?> _decvar_,
        @SuppressWarnings("hiding") PBloc _bloc_)
    {
        // Constructor
        setNom(_nom_);

        setParentheseo(_parentheseo_);

        setFctdecvar(_fctdecvar_);

        setParenthesef(_parenthesef_);

        setDecvar(_decvar_);

        setBloc(_bloc_);

    }

    @Override
    public Object clone()
    {
        return new AArgsDeffonction(
            cloneNode(this._nom_),
            cloneNode(this._parentheseo_),
            cloneNode(this._fctdecvar_),
            cloneNode(this._parenthesef_),
            cloneList(this._decvar_),
            cloneNode(this._bloc_));
    }

    @Override
    public void apply(Switch sw)
    {
        ((Analysis) sw).caseAArgsDeffonction(this);
    }

    public TNom getNom()
    {
        return this._nom_;
    }

    public void setNom(TNom node)
    {
        if(this._nom_ != null)
        {
            this._nom_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._nom_ = node;
    }

    public TParentheseo getParentheseo()
    {
        return this._parentheseo_;
    }

    public void setParentheseo(TParentheseo node)
    {
        if(this._parentheseo_ != null)
        {
            this._parentheseo_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parentheseo_ = node;
    }

    public PFctdecvar getFctdecvar()
    {
        return this._fctdecvar_;
    }

    public void setFctdecvar(PFctdecvar node)
    {
        if(this._fctdecvar_ != null)
        {
            this._fctdecvar_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._fctdecvar_ = node;
    }

    public TParenthesef getParenthesef()
    {
        return this._parenthesef_;
    }

    public void setParenthesef(TParenthesef node)
    {
        if(this._parenthesef_ != null)
        {
            this._parenthesef_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._parenthesef_ = node;
    }

    public LinkedList<PDecvar> getDecvar()
    {
        return this._decvar_;
    }

    public void setDecvar(List<?> list)
    {
        for(PDecvar e : this._decvar_)
        {
            e.parent(null);
        }
        this._decvar_.clear();

        for(Object obj_e : list)
        {
            PDecvar e = (PDecvar) obj_e;
            if(e.parent() != null)
            {
                e.parent().removeChild(e);
            }

            e.parent(this);
            this._decvar_.add(e);
        }
    }

    public PBloc getBloc()
    {
        return this._bloc_;
    }

    public void setBloc(PBloc node)
    {
        if(this._bloc_ != null)
        {
            this._bloc_.parent(null);
        }

        if(node != null)
        {
            if(node.parent() != null)
            {
                node.parent().removeChild(node);
            }

            node.parent(this);
        }

        this._bloc_ = node;
    }

    @Override
    public String toString()
    {
        return ""
            + toString(this._nom_)
            + toString(this._parentheseo_)
            + toString(this._fctdecvar_)
            + toString(this._parenthesef_)
            + toString(this._decvar_)
            + toString(this._bloc_);
    }

    @Override
    void removeChild(@SuppressWarnings("unused") Node child)
    {
        // Remove child
        if(this._nom_ == child)
        {
            this._nom_ = null;
            return;
        }

        if(this._parentheseo_ == child)
        {
            this._parentheseo_ = null;
            return;
        }

        if(this._fctdecvar_ == child)
        {
            this._fctdecvar_ = null;
            return;
        }

        if(this._parenthesef_ == child)
        {
            this._parenthesef_ = null;
            return;
        }

        if(this._decvar_.remove(child))
        {
            return;
        }

        if(this._bloc_ == child)
        {
            this._bloc_ = null;
            return;
        }

        throw new RuntimeException("Not a child.");
    }

    @Override
    void replaceChild(@SuppressWarnings("unused") Node oldChild, @SuppressWarnings("unused") Node newChild)
    {
        // Replace child
        if(this._nom_ == oldChild)
        {
            setNom((TNom) newChild);
            return;
        }

        if(this._parentheseo_ == oldChild)
        {
            setParentheseo((TParentheseo) newChild);
            return;
        }

        if(this._fctdecvar_ == oldChild)
        {
            setFctdecvar((PFctdecvar) newChild);
            return;
        }

        if(this._parenthesef_ == oldChild)
        {
            setParenthesef((TParenthesef) newChild);
            return;
        }

        for(ListIterator<PDecvar> i = this._decvar_.listIterator(); i.hasNext();)
        {
            if(i.next() == oldChild)
            {
                if(newChild != null)
                {
                    i.set((PDecvar) newChild);
                    newChild.parent(this);
                    oldChild.parent(null);
                    return;
                }

                i.remove();
                oldChild.parent(null);
                return;
            }
        }

        if(this._bloc_ == oldChild)
        {
            setBloc((PBloc) newChild);
            return;
        }

        throw new RuntimeException("Not a child.");
    }
}
