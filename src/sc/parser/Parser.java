/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.parser;

import sc.lexer.*;
import sc.node.*;
import sc.analysis.*;
import java.util.*;

import java.io.DataInputStream;
import java.io.BufferedInputStream;
import java.io.IOException;

@SuppressWarnings("nls")
public class Parser
{
    public final Analysis ignoredTokens = new AnalysisAdapter();

    protected ArrayList<Object> nodeList;

    private final Lexer lexer;
    private final ListIterator<Object> stack = new LinkedList<Object>().listIterator();
    private int last_pos;
    private int last_line;
    private Token last_token;
    private final TokenIndex converter = new TokenIndex();
    private final int[] action = new int[2];

    private final static int SHIFT = 0;
    private final static int REDUCE = 1;
    private final static int ACCEPT = 2;
    private final static int ERROR = 3;

    public Parser(@SuppressWarnings("hiding") Lexer lexer)
    {
        this.lexer = lexer;
    }

    protected void filter() throws ParserException, LexerException, IOException
    {
        // Empty body
    }

    private void push(int numstate, ArrayList<Object> listNode, boolean hidden) throws ParserException, LexerException, IOException
    {
        this.nodeList = listNode;

        if(!hidden)
        {
            filter();
        }

        if(!this.stack.hasNext())
        {
            this.stack.add(new State(numstate, this.nodeList));
            return;
        }

        State s = (State) this.stack.next();
        s.state = numstate;
        s.nodes = this.nodeList;
    }

    private int goTo(int index)
    {
        int state = state();
        int low = 1;
        int high = gotoTable[index].length - 1;
        int value = gotoTable[index][0][1];

        while(low <= high)
        {
            // int middle = (low + high) / 2;
            int middle = (low + high) >>> 1;

            if(state < gotoTable[index][middle][0])
            {
                high = middle - 1;
            }
            else if(state > gotoTable[index][middle][0])
            {
                low = middle + 1;
            }
            else
            {
                value = gotoTable[index][middle][1];
                break;
            }
        }

        return value;
    }

    private int state()
    {
        State s = (State) this.stack.previous();
        this.stack.next();
        return s.state;
    }

    private ArrayList<Object> pop()
    {
        return ((State) this.stack.previous()).nodes;
    }

    private int index(Switchable token)
    {
        this.converter.index = -1;
        token.apply(this.converter);
        return this.converter.index;
    }

    @SuppressWarnings("unchecked")
    public Start parse() throws ParserException, LexerException, IOException
    {
        push(0, null, true);
        List<Node> ign = null;
        while(true)
        {
            while(index(this.lexer.peek()) == -1)
            {
                if(ign == null)
                {
                    ign = new LinkedList<Node>();
                }

                ign.add(this.lexer.next());
            }

            if(ign != null)
            {
                this.ignoredTokens.setIn(this.lexer.peek(), ign);
                ign = null;
            }

            this.last_pos = this.lexer.peek().getPos();
            this.last_line = this.lexer.peek().getLine();
            this.last_token = this.lexer.peek();

            int index = index(this.lexer.peek());
            this.action[0] = Parser.actionTable[state()][0][1];
            this.action[1] = Parser.actionTable[state()][0][2];

            int low = 1;
            int high = Parser.actionTable[state()].length - 1;

            while(low <= high)
            {
                int middle = (low + high) / 2;

                if(index < Parser.actionTable[state()][middle][0])
                {
                    high = middle - 1;
                }
                else if(index > Parser.actionTable[state()][middle][0])
                {
                    low = middle + 1;
                }
                else
                {
                    this.action[0] = Parser.actionTable[state()][middle][1];
                    this.action[1] = Parser.actionTable[state()][middle][2];
                    break;
                }
            }

            switch(this.action[0])
            {
                case SHIFT:
		    {
		        ArrayList<Object> list = new ArrayList<Object>();
		        list.add(this.lexer.next());
                        push(this.action[1], list, false);
                    }
		    break;
                case REDUCE:
                    {
                        int reduction = this.action[1];
                        if(reduction < 500) reduce_0(reduction);
                    }
                    break;
                case ACCEPT:
                    {
                        EOF node2 = (EOF) this.lexer.next();
                        PProgramme node1 = (PProgramme) pop().get(0);
                        Start node = new Start(node1, node2);
                        return node;
                    }
                case ERROR:
                    throw new ParserException(this.last_token,
                        "[" + this.last_line + "," + this.last_pos + "] " +
                        Parser.errorMessages[Parser.errors[this.action[1]]]);
            }
        }
    }

    private void reduce_0(int reduction) throws IOException, LexerException, ParserException
    {
        switch(reduction)
        {
            case 0: /* reduce AProgramme */
            {
                ArrayList<Object> list = new0();
                push(goTo(0), list, false);
            }
            break;
            case 1: /* reduce AMultipleDecvar */
            {
                ArrayList<Object> list = new1();
                push(goTo(1), list, false);
            }
            break;
            case 2: /* reduce AEntierVarsimple */
            {
                ArrayList<Object> list = new2();
                push(goTo(2), list, false);
            }
            break;
            case 3: /* reduce ATabVarsimple */
            {
                ArrayList<Object> list = new3();
                push(goTo(2), list, false);
            }
            break;
            case 4: /* reduce AVarent */
            {
                ArrayList<Object> list = new4();
                push(goTo(3), list, false);
            }
            break;
            case 5: /* reduce AVartab */
            {
                ArrayList<Object> list = new5();
                push(goTo(4), list, false);
            }
            break;
            case 6: /* reduce AVarmultiple */
            {
                ArrayList<Object> list = new6();
                push(goTo(5), list, false);
            }
            break;
            case 7: /* reduce ARienVarmultiple */
            {
                ArrayList<Object> list = new7();
                push(goTo(5), list, false);
            }
            break;
            case 8: /* reduce AMultipleFctdecvar */
            {
                ArrayList<Object> list = new8();
                push(goTo(6), list, false);
            }
            break;
            case 9: /* reduce AFctvarmultiple */
            {
                ArrayList<Object> list = new9();
                push(goTo(7), list, false);
            }
            break;
            case 10: /* reduce ARienFctvarmultiple */
            {
                ArrayList<Object> list = new10();
                push(goTo(7), list, false);
            }
            break;
            case 11: /* reduce AFoncDeffonction2 */
            {
                ArrayList<Object> list = new11();
                push(goTo(8), list, false);
            }
            break;
            case 12: /* reduce ARienDeffonction2 */
            {
                ArrayList<Object> list = new12();
                push(goTo(8), list, false);
            }
            break;
            case 13: /* reduce AArgsDeffonction */
            {
                ArrayList<Object> list = new13();
                push(goTo(9), list, false);
            }
            break;
            case 14: /* reduce ASansargDeffonction */
            {
                ArrayList<Object> list = new14();
                push(goTo(9), list, false);
            }
            break;
            case 15: /* reduce ARienDecvar2 */
            {
                ArrayList<Object> list = new15();
                push(goTo(10), list, false);
            }
            break;
            case 16: /* reduce AVarDecvar2 */
            {
                ArrayList<Object> list = new16();
                push(goTo(10), list, false);
            }
            break;
            case 17: /* reduce AListListinstr */
            {
                ArrayList<Object> list = new17();
                push(goTo(11), list, false);
            }
            break;
            case 18: /* reduce ARienListinstr */
            {
                ArrayList<Object> list = new18();
                push(goTo(11), list, false);
            }
            break;
            case 19: /* reduce AAffectationInstr */
            {
                ArrayList<Object> list = new19();
                push(goTo(12), list, false);
            }
            break;
            case 20: /* reduce ABlocInstr */
            {
                ArrayList<Object> list = new20();
                push(goTo(12), list, false);
            }
            break;
            case 21: /* reduce ATantqueInstr */
            {
                ArrayList<Object> list = new21();
                push(goTo(12), list, false);
            }
            break;
            case 22: /* reduce ASiInstr */
            {
                ArrayList<Object> list = new22();
                push(goTo(12), list, false);
            }
            break;
            case 23: /* reduce ARetourInstr */
            {
                ArrayList<Object> list = new23();
                push(goTo(12), list, false);
            }
            break;
            case 24: /* reduce AEcrireInstr */
            {
                ArrayList<Object> list = new24();
                push(goTo(12), list, false);
            }
            break;
            case 25: /* reduce AInstrtantque */
            {
                ArrayList<Object> list = new25();
                push(goTo(13), list, false);
            }
            break;
            case 26: /* reduce AInstrretour */
            {
                ArrayList<Object> list = new26();
                push(goTo(14), list, false);
            }
            break;
            case 27: /* reduce ASisinonInstrsi */
            {
                ArrayList<Object> list = new27();
                push(goTo(15), list, false);
            }
            break;
            case 28: /* reduce ASiInstrsi */
            {
                ArrayList<Object> list = new28();
                push(goTo(15), list, false);
            }
            break;
            case 29: /* reduce AInstrsinon */
            {
                ArrayList<Object> list = new29();
                push(goTo(16), list, false);
            }
            break;
            case 30: /* reduce ABloc */
            {
                ArrayList<Object> list = new30();
                push(goTo(17), list, false);
            }
            break;
            case 31: /* reduce AAffect */
            {
                ArrayList<Object> list = new31();
                push(goTo(18), list, false);
            }
            break;
            case 32: /* reduce ASimpleVariable */
            {
                ArrayList<Object> list = new32();
                push(goTo(19), list, false);
            }
            break;
            case 33: /* reduce ATabVariable */
            {
                ArrayList<Object> list = new33();
                push(goTo(19), list, false);
            }
            break;
            case 34: /* reduce AOuExpr */
            {
                ArrayList<Object> list = new34();
                push(goTo(20), list, false);
            }
            break;
            case 35: /* reduce AExpr2Expr */
            {
                ArrayList<Object> list = new35();
                push(goTo(20), list, false);
            }
            break;
            case 36: /* reduce AEtExpr2 */
            {
                ArrayList<Object> list = new36();
                push(goTo(21), list, false);
            }
            break;
            case 37: /* reduce AExpr3Expr2 */
            {
                ArrayList<Object> list = new37();
                push(goTo(21), list, false);
            }
            break;
            case 38: /* reduce AEgalExpr3 */
            {
                ArrayList<Object> list = new38();
                push(goTo(22), list, false);
            }
            break;
            case 39: /* reduce AInfExpr3 */
            {
                ArrayList<Object> list = new39();
                push(goTo(22), list, false);
            }
            break;
            case 40: /* reduce AExpr4Expr3 */
            {
                ArrayList<Object> list = new40();
                push(goTo(22), list, false);
            }
            break;
            case 41: /* reduce APlusExpr4 */
            {
                ArrayList<Object> list = new41();
                push(goTo(23), list, false);
            }
            break;
            case 42: /* reduce AMoinsExpr4 */
            {
                ArrayList<Object> list = new42();
                push(goTo(23), list, false);
            }
            break;
            case 43: /* reduce AExpr5Expr4 */
            {
                ArrayList<Object> list = new43();
                push(goTo(23), list, false);
            }
            break;
            case 44: /* reduce AMultiExpr5 */
            {
                ArrayList<Object> list = new44();
                push(goTo(24), list, false);
            }
            break;
            case 45: /* reduce ADivExpr5 */
            {
                ArrayList<Object> list = new45();
                push(goTo(24), list, false);
            }
            break;
            case 46: /* reduce AExpr6Expr5 */
            {
                ArrayList<Object> list = new46();
                push(goTo(24), list, false);
            }
            break;
            case 47: /* reduce ANonExpr6 */
            {
                ArrayList<Object> list = new47();
                push(goTo(25), list, false);
            }
            break;
            case 48: /* reduce APart2Expr6 */
            {
                ArrayList<Object> list = new48();
                push(goTo(25), list, false);
            }
            break;
            case 49: /* reduce AExprentreparenthesesExpr7 */
            {
                ArrayList<Object> list = new49();
                push(goTo(26), list, false);
            }
            break;
            case 50: /* reduce ANomvarExpr7 */
            {
                ArrayList<Object> list = new50();
                push(goTo(26), list, false);
            }
            break;
            case 51: /* reduce ANombreExpr7 */
            {
                ArrayList<Object> list = new51();
                push(goTo(26), list, false);
            }
            break;
            case 52: /* reduce ALireExpr7 */
            {
                ArrayList<Object> list = new52();
                push(goTo(26), list, false);
            }
            break;
            case 53: /* reduce ATabExpr7 */
            {
                ArrayList<Object> list = new53();
                push(goTo(26), list, false);
            }
            break;
            case 54: /* reduce AFonctionExpr7 */
            {
                ArrayList<Object> list = new54();
                push(goTo(26), list, false);
            }
            break;
            case 55: /* reduce AAppelExpr7 */
            {
                ArrayList<Object> list = new55();
                push(goTo(26), list, false);
            }
            break;
            case 56: /* reduce AFonctionecrire */
            {
                ArrayList<Object> list = new56();
                push(goTo(27), list, false);
            }
            break;
            case 57: /* reduce AFonctionappel */
            {
                ArrayList<Object> list = new57();
                push(goTo(28), list, false);
            }
            break;
            case 58: /* reduce AAppelexpr */
            {
                ArrayList<Object> list = new58();
                push(goTo(29), list, false);
            }
            break;
            case 59: /* reduce AListeexpr */
            {
                ArrayList<Object> list = new59();
                push(goTo(30), list, false);
            }
            break;
            case 60: /* reduce AFonctionlire */
            {
                ArrayList<Object> list = new60();
                push(goTo(31), list, false);
            }
            break;
        }
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new0() /* reduce AProgramme */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PProgramme pprogrammeNode1;
        {
            // Block
        PDecvar2 pdecvar2Node2;
        PDeffonction2 pdeffonction2Node3;
        pdecvar2Node2 = (PDecvar2)nodeArrayList1.get(0);
        pdeffonction2Node3 = (PDeffonction2)nodeArrayList2.get(0);

        pprogrammeNode1 = new AProgramme(pdecvar2Node2, pdeffonction2Node3);
        }
	nodeList.add(pprogrammeNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new1() /* reduce AMultipleDecvar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecvar pdecvarNode1;
        {
            // Block
        PVarsimple pvarsimpleNode2;
        PVarmultiple pvarmultipleNode3;
        TPointvirgule tpointvirguleNode4;
        pvarsimpleNode2 = (PVarsimple)nodeArrayList1.get(0);
        pvarmultipleNode3 = (PVarmultiple)nodeArrayList2.get(0);
        tpointvirguleNode4 = (TPointvirgule)nodeArrayList3.get(0);

        pdecvarNode1 = new AMultipleDecvar(pvarsimpleNode2, pvarmultipleNode3, tpointvirguleNode4);
        }
	nodeList.add(pdecvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new2() /* reduce AEntierVarsimple */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarsimple pvarsimpleNode1;
        {
            // Block
        PVarent pvarentNode2;
        pvarentNode2 = (PVarent)nodeArrayList1.get(0);

        pvarsimpleNode1 = new AEntierVarsimple(pvarentNode2);
        }
	nodeList.add(pvarsimpleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new3() /* reduce ATabVarsimple */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarsimple pvarsimpleNode1;
        {
            // Block
        PVartab pvartabNode2;
        pvartabNode2 = (PVartab)nodeArrayList1.get(0);

        pvarsimpleNode1 = new ATabVarsimple(pvartabNode2);
        }
	nodeList.add(pvarsimpleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new4() /* reduce AVarent */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarent pvarentNode1;
        {
            // Block
        TTypeentier ttypeentierNode2;
        TNom tnomNode3;
        ttypeentierNode2 = (TTypeentier)nodeArrayList1.get(0);
        tnomNode3 = (TNom)nodeArrayList2.get(0);

        pvarentNode1 = new AVarent(ttypeentierNode2, tnomNode3);
        }
	nodeList.add(pvarentNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new5() /* reduce AVartab */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVartab pvartabNode1;
        {
            // Block
        TTypeentier ttypeentierNode2;
        TNom tnomNode3;
        TCrocheto tcrochetoNode4;
        PExpr pexprNode5;
        TCrochetf tcrochetfNode6;
        ttypeentierNode2 = (TTypeentier)nodeArrayList1.get(0);
        tnomNode3 = (TNom)nodeArrayList2.get(0);
        tcrochetoNode4 = (TCrocheto)nodeArrayList3.get(0);
        pexprNode5 = (PExpr)nodeArrayList4.get(0);
        tcrochetfNode6 = (TCrochetf)nodeArrayList5.get(0);

        pvartabNode1 = new AVartab(ttypeentierNode2, tnomNode3, tcrochetoNode4, pexprNode5, tcrochetfNode6);
        }
	nodeList.add(pvartabNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new6() /* reduce AVarmultiple */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVarmultiple pvarmultipleNode1;
        {
            // Block
        TVirgule tvirguleNode2;
        PVarsimple pvarsimpleNode3;
        PVarmultiple pvarmultipleNode4;
        tvirguleNode2 = (TVirgule)nodeArrayList1.get(0);
        pvarsimpleNode3 = (PVarsimple)nodeArrayList2.get(0);
        pvarmultipleNode4 = (PVarmultiple)nodeArrayList3.get(0);

        pvarmultipleNode1 = new AVarmultiple(tvirguleNode2, pvarsimpleNode3, pvarmultipleNode4);
        }
	nodeList.add(pvarmultipleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new7() /* reduce ARienVarmultiple */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PVarmultiple pvarmultipleNode1;
        {
            // Block

        pvarmultipleNode1 = new ARienVarmultiple();
        }
	nodeList.add(pvarmultipleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new8() /* reduce AMultipleFctdecvar */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFctdecvar pfctdecvarNode1;
        {
            // Block
        PVarsimple pvarsimpleNode2;
        PVarmultiple pvarmultipleNode3;
        pvarsimpleNode2 = (PVarsimple)nodeArrayList1.get(0);
        pvarmultipleNode3 = (PVarmultiple)nodeArrayList2.get(0);

        pfctdecvarNode1 = new AMultipleFctdecvar(pvarsimpleNode2, pvarmultipleNode3);
        }
	nodeList.add(pfctdecvarNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new9() /* reduce AFctvarmultiple */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFctvarmultiple pfctvarmultipleNode1;
        {
            // Block
        TVirgule tvirguleNode2;
        PVarsimple pvarsimpleNode3;
        PFctvarmultiple pfctvarmultipleNode4;
        tvirguleNode2 = (TVirgule)nodeArrayList1.get(0);
        pvarsimpleNode3 = (PVarsimple)nodeArrayList2.get(0);
        pfctvarmultipleNode4 = (PFctvarmultiple)nodeArrayList3.get(0);

        pfctvarmultipleNode1 = new AFctvarmultiple(tvirguleNode2, pvarsimpleNode3, pfctvarmultipleNode4);
        }
	nodeList.add(pfctvarmultipleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new10() /* reduce ARienFctvarmultiple */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PFctvarmultiple pfctvarmultipleNode1;
        {
            // Block

        pfctvarmultipleNode1 = new ARienFctvarmultiple();
        }
	nodeList.add(pfctvarmultipleNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new11() /* reduce AFoncDeffonction2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeffonction2 pdeffonction2Node1;
        {
            // Block
        PDeffonction pdeffonctionNode2;
        PDeffonction2 pdeffonction2Node3;
        pdeffonctionNode2 = (PDeffonction)nodeArrayList1.get(0);
        pdeffonction2Node3 = (PDeffonction2)nodeArrayList2.get(0);

        pdeffonction2Node1 = new AFoncDeffonction2(pdeffonctionNode2, pdeffonction2Node3);
        }
	nodeList.add(pdeffonction2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new12() /* reduce ARienDeffonction2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PDeffonction2 pdeffonction2Node1;
        {
            // Block

        pdeffonction2Node1 = new ARienDeffonction2();
        }
	nodeList.add(pdeffonction2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new13() /* reduce AArgsDeffonction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList6 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeffonction pdeffonctionNode1;
        {
            // Block
        TNom tnomNode2;
        TParentheseo tparentheseoNode3;
        PFctdecvar pfctdecvarNode4;
        TParenthesef tparenthesefNode5;
        PDecvar2 pdecvar2Node6;
        PBloc pblocNode7;
        tnomNode2 = (TNom)nodeArrayList1.get(0);
        tparentheseoNode3 = (TParentheseo)nodeArrayList2.get(0);
        pfctdecvarNode4 = (PFctdecvar)nodeArrayList3.get(0);
        tparenthesefNode5 = (TParenthesef)nodeArrayList4.get(0);
        pdecvar2Node6 = (PDecvar2)nodeArrayList5.get(0);
        pblocNode7 = (PBloc)nodeArrayList6.get(0);

        pdeffonctionNode1 = new AArgsDeffonction(tnomNode2, tparentheseoNode3, pfctdecvarNode4, tparenthesefNode5, pdecvar2Node6, pblocNode7);
        }
	nodeList.add(pdeffonctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new14() /* reduce ASansargDeffonction */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDeffonction pdeffonctionNode1;
        {
            // Block
        TNom tnomNode2;
        TParentheseo tparentheseoNode3;
        TParenthesef tparenthesefNode4;
        PDecvar2 pdecvar2Node5;
        PBloc pblocNode6;
        tnomNode2 = (TNom)nodeArrayList1.get(0);
        tparentheseoNode3 = (TParentheseo)nodeArrayList2.get(0);
        tparenthesefNode4 = (TParenthesef)nodeArrayList3.get(0);
        pdecvar2Node5 = (PDecvar2)nodeArrayList4.get(0);
        pblocNode6 = (PBloc)nodeArrayList5.get(0);

        pdeffonctionNode1 = new ASansargDeffonction(tnomNode2, tparentheseoNode3, tparenthesefNode4, pdecvar2Node5, pblocNode6);
        }
	nodeList.add(pdeffonctionNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new15() /* reduce ARienDecvar2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PDecvar2 pdecvar2Node1;
        {
            // Block

        pdecvar2Node1 = new ARienDecvar2();
        }
	nodeList.add(pdecvar2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new16() /* reduce AVarDecvar2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PDecvar2 pdecvar2Node1;
        {
            // Block
        PDecvar pdecvarNode2;
        pdecvarNode2 = (PDecvar)nodeArrayList1.get(0);

        pdecvar2Node1 = new AVarDecvar2(pdecvarNode2);
        }
	nodeList.add(pdecvar2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new17() /* reduce AListListinstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListinstr plistinstrNode1;
        {
            // Block
        PInstr pinstrNode2;
        PListinstr plistinstrNode3;
        pinstrNode2 = (PInstr)nodeArrayList1.get(0);
        plistinstrNode3 = (PListinstr)nodeArrayList2.get(0);

        plistinstrNode1 = new AListListinstr(pinstrNode2, plistinstrNode3);
        }
	nodeList.add(plistinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new18() /* reduce ARienListinstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        PListinstr plistinstrNode1;
        {
            // Block

        plistinstrNode1 = new ARienListinstr();
        }
	nodeList.add(plistinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new19() /* reduce AAffectationInstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        PAffect paffectNode2;
        paffectNode2 = (PAffect)nodeArrayList1.get(0);

        pinstrNode1 = new AAffectationInstr(paffectNode2);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new20() /* reduce ABlocInstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        PBloc pblocNode2;
        pblocNode2 = (PBloc)nodeArrayList1.get(0);

        pinstrNode1 = new ABlocInstr(pblocNode2);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new21() /* reduce ATantqueInstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        PInstrtantque pinstrtantqueNode2;
        pinstrtantqueNode2 = (PInstrtantque)nodeArrayList1.get(0);

        pinstrNode1 = new ATantqueInstr(pinstrtantqueNode2);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new22() /* reduce ASiInstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        PInstrsi pinstrsiNode2;
        pinstrsiNode2 = (PInstrsi)nodeArrayList1.get(0);

        pinstrNode1 = new ASiInstr(pinstrsiNode2);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new23() /* reduce ARetourInstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        PInstrretour pinstrretourNode2;
        pinstrretourNode2 = (PInstrretour)nodeArrayList1.get(0);

        pinstrNode1 = new ARetourInstr(pinstrretourNode2);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new24() /* reduce AEcrireInstr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstr pinstrNode1;
        {
            // Block
        PFonctionecrire pfonctionecrireNode2;
        pfonctionecrireNode2 = (PFonctionecrire)nodeArrayList1.get(0);

        pinstrNode1 = new AEcrireInstr(pfonctionecrireNode2);
        }
	nodeList.add(pinstrNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new25() /* reduce AInstrtantque */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstrtantque pinstrtantqueNode1;
        {
            // Block
        TTantque ttantqueNode2;
        PExpr pexprNode3;
        TFaire tfaireNode4;
        PBloc pblocNode5;
        ttantqueNode2 = (TTantque)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tfaireNode4 = (TFaire)nodeArrayList3.get(0);
        pblocNode5 = (PBloc)nodeArrayList4.get(0);

        pinstrtantqueNode1 = new AInstrtantque(ttantqueNode2, pexprNode3, tfaireNode4, pblocNode5);
        }
	nodeList.add(pinstrtantqueNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new26() /* reduce AInstrretour */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstrretour pinstrretourNode1;
        {
            // Block
        TRetour tretourNode2;
        PExpr pexprNode3;
        TPointvirgule tpointvirguleNode4;
        tretourNode2 = (TRetour)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tpointvirguleNode4 = (TPointvirgule)nodeArrayList3.get(0);

        pinstrretourNode1 = new AInstrretour(tretourNode2, pexprNode3, tpointvirguleNode4);
        }
	nodeList.add(pinstrretourNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new27() /* reduce ASisinonInstrsi */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstrsi pinstrsiNode1;
        {
            // Block
        TSi tsiNode2;
        PExpr pexprNode3;
        TAlors talorsNode4;
        PBloc pblocNode5;
        PInstrsinon pinstrsinonNode6;
        tsiNode2 = (TSi)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        talorsNode4 = (TAlors)nodeArrayList3.get(0);
        pblocNode5 = (PBloc)nodeArrayList4.get(0);
        pinstrsinonNode6 = (PInstrsinon)nodeArrayList5.get(0);

        pinstrsiNode1 = new ASisinonInstrsi(tsiNode2, pexprNode3, talorsNode4, pblocNode5, pinstrsinonNode6);
        }
	nodeList.add(pinstrsiNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new28() /* reduce ASiInstrsi */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstrsi pinstrsiNode1;
        {
            // Block
        TSi tsiNode2;
        PExpr pexprNode3;
        TAlors talorsNode4;
        PBloc pblocNode5;
        tsiNode2 = (TSi)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        talorsNode4 = (TAlors)nodeArrayList3.get(0);
        pblocNode5 = (PBloc)nodeArrayList4.get(0);

        pinstrsiNode1 = new ASiInstrsi(tsiNode2, pexprNode3, talorsNode4, pblocNode5);
        }
	nodeList.add(pinstrsiNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new29() /* reduce AInstrsinon */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PInstrsinon pinstrsinonNode1;
        {
            // Block
        TSinon tsinonNode2;
        PBloc pblocNode3;
        tsinonNode2 = (TSinon)nodeArrayList1.get(0);
        pblocNode3 = (PBloc)nodeArrayList2.get(0);

        pinstrsinonNode1 = new AInstrsinon(tsinonNode2, pblocNode3);
        }
	nodeList.add(pinstrsinonNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new30() /* reduce ABloc */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PBloc pblocNode1;
        {
            // Block
        TAccoladeo taccoladeoNode2;
        PListinstr plistinstrNode3;
        TAccoladef taccoladefNode4;
        taccoladeoNode2 = (TAccoladeo)nodeArrayList1.get(0);
        plistinstrNode3 = (PListinstr)nodeArrayList2.get(0);
        taccoladefNode4 = (TAccoladef)nodeArrayList3.get(0);

        pblocNode1 = new ABloc(taccoladeoNode2, plistinstrNode3, taccoladefNode4);
        }
	nodeList.add(pblocNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new31() /* reduce AAffect */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAffect paffectNode1;
        {
            // Block
        PVariable pvariableNode2;
        TEgal tegalNode3;
        PExpr pexprNode4;
        TPointvirgule tpointvirguleNode5;
        pvariableNode2 = (PVariable)nodeArrayList1.get(0);
        tegalNode3 = (TEgal)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        tpointvirguleNode5 = (TPointvirgule)nodeArrayList4.get(0);

        paffectNode1 = new AAffect(pvariableNode2, tegalNode3, pexprNode4, tpointvirguleNode5);
        }
	nodeList.add(paffectNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new32() /* reduce ASimpleVariable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariable pvariableNode1;
        {
            // Block
        TNom tnomNode2;
        tnomNode2 = (TNom)nodeArrayList1.get(0);

        pvariableNode1 = new ASimpleVariable(tnomNode2);
        }
	nodeList.add(pvariableNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new33() /* reduce ATabVariable */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PVariable pvariableNode1;
        {
            // Block
        TNom tnomNode2;
        TCrocheto tcrochetoNode3;
        PExpr pexprNode4;
        TCrochetf tcrochetfNode5;
        tnomNode2 = (TNom)nodeArrayList1.get(0);
        tcrochetoNode3 = (TCrocheto)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        tcrochetfNode5 = (TCrochetf)nodeArrayList4.get(0);

        pvariableNode1 = new ATabVariable(tnomNode2, tcrochetoNode3, pexprNode4, tcrochetfNode5);
        }
	nodeList.add(pvariableNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new34() /* reduce AOuExpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr pexprNode2;
        TOu touNode3;
        PExpr2 pexpr2Node4;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        touNode3 = (TOu)nodeArrayList2.get(0);
        pexpr2Node4 = (PExpr2)nodeArrayList3.get(0);

        pexprNode1 = new AOuExpr(pexprNode2, touNode3, pexpr2Node4);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new35() /* reduce AExpr2Expr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr pexprNode1;
        {
            // Block
        PExpr2 pexpr2Node2;
        pexpr2Node2 = (PExpr2)nodeArrayList1.get(0);

        pexprNode1 = new AExpr2Expr(pexpr2Node2);
        }
	nodeList.add(pexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new36() /* reduce AEtExpr2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr2 pexpr2Node1;
        {
            // Block
        PExpr2 pexpr2Node2;
        TEt tetNode3;
        PExpr3 pexpr3Node4;
        pexpr2Node2 = (PExpr2)nodeArrayList1.get(0);
        tetNode3 = (TEt)nodeArrayList2.get(0);
        pexpr3Node4 = (PExpr3)nodeArrayList3.get(0);

        pexpr2Node1 = new AEtExpr2(pexpr2Node2, tetNode3, pexpr3Node4);
        }
	nodeList.add(pexpr2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new37() /* reduce AExpr3Expr2 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr2 pexpr2Node1;
        {
            // Block
        PExpr3 pexpr3Node2;
        pexpr3Node2 = (PExpr3)nodeArrayList1.get(0);

        pexpr2Node1 = new AExpr3Expr2(pexpr3Node2);
        }
	nodeList.add(pexpr2Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new38() /* reduce AEgalExpr3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr3 pexpr3Node1;
        {
            // Block
        PExpr3 pexpr3Node2;
        TEgal tegalNode3;
        PExpr4 pexpr4Node4;
        pexpr3Node2 = (PExpr3)nodeArrayList1.get(0);
        tegalNode3 = (TEgal)nodeArrayList2.get(0);
        pexpr4Node4 = (PExpr4)nodeArrayList3.get(0);

        pexpr3Node1 = new AEgalExpr3(pexpr3Node2, tegalNode3, pexpr4Node4);
        }
	nodeList.add(pexpr3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new39() /* reduce AInfExpr3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr3 pexpr3Node1;
        {
            // Block
        PExpr3 pexpr3Node2;
        TInf tinfNode3;
        PExpr4 pexpr4Node4;
        pexpr3Node2 = (PExpr3)nodeArrayList1.get(0);
        tinfNode3 = (TInf)nodeArrayList2.get(0);
        pexpr4Node4 = (PExpr4)nodeArrayList3.get(0);

        pexpr3Node1 = new AInfExpr3(pexpr3Node2, tinfNode3, pexpr4Node4);
        }
	nodeList.add(pexpr3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new40() /* reduce AExpr4Expr3 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr3 pexpr3Node1;
        {
            // Block
        PExpr4 pexpr4Node2;
        pexpr4Node2 = (PExpr4)nodeArrayList1.get(0);

        pexpr3Node1 = new AExpr4Expr3(pexpr4Node2);
        }
	nodeList.add(pexpr3Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new41() /* reduce APlusExpr4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr4 pexpr4Node1;
        {
            // Block
        PExpr4 pexpr4Node2;
        TPlus tplusNode3;
        PExpr5 pexpr5Node4;
        pexpr4Node2 = (PExpr4)nodeArrayList1.get(0);
        tplusNode3 = (TPlus)nodeArrayList2.get(0);
        pexpr5Node4 = (PExpr5)nodeArrayList3.get(0);

        pexpr4Node1 = new APlusExpr4(pexpr4Node2, tplusNode3, pexpr5Node4);
        }
	nodeList.add(pexpr4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new42() /* reduce AMoinsExpr4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr4 pexpr4Node1;
        {
            // Block
        PExpr4 pexpr4Node2;
        TMoins tmoinsNode3;
        PExpr5 pexpr5Node4;
        pexpr4Node2 = (PExpr4)nodeArrayList1.get(0);
        tmoinsNode3 = (TMoins)nodeArrayList2.get(0);
        pexpr5Node4 = (PExpr5)nodeArrayList3.get(0);

        pexpr4Node1 = new AMoinsExpr4(pexpr4Node2, tmoinsNode3, pexpr5Node4);
        }
	nodeList.add(pexpr4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new43() /* reduce AExpr5Expr4 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr4 pexpr4Node1;
        {
            // Block
        PExpr5 pexpr5Node2;
        pexpr5Node2 = (PExpr5)nodeArrayList1.get(0);

        pexpr4Node1 = new AExpr5Expr4(pexpr5Node2);
        }
	nodeList.add(pexpr4Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new44() /* reduce AMultiExpr5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr5 pexpr5Node1;
        {
            // Block
        PExpr5 pexpr5Node2;
        TMulti tmultiNode3;
        PExpr6 pexpr6Node4;
        pexpr5Node2 = (PExpr5)nodeArrayList1.get(0);
        tmultiNode3 = (TMulti)nodeArrayList2.get(0);
        pexpr6Node4 = (PExpr6)nodeArrayList3.get(0);

        pexpr5Node1 = new AMultiExpr5(pexpr5Node2, tmultiNode3, pexpr6Node4);
        }
	nodeList.add(pexpr5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new45() /* reduce ADivExpr5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr5 pexpr5Node1;
        {
            // Block
        PExpr5 pexpr5Node2;
        TDiv tdivNode3;
        PExpr6 pexpr6Node4;
        pexpr5Node2 = (PExpr5)nodeArrayList1.get(0);
        tdivNode3 = (TDiv)nodeArrayList2.get(0);
        pexpr6Node4 = (PExpr6)nodeArrayList3.get(0);

        pexpr5Node1 = new ADivExpr5(pexpr5Node2, tdivNode3, pexpr6Node4);
        }
	nodeList.add(pexpr5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new46() /* reduce AExpr6Expr5 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr5 pexpr5Node1;
        {
            // Block
        PExpr6 pexpr6Node2;
        pexpr6Node2 = (PExpr6)nodeArrayList1.get(0);

        pexpr5Node1 = new AExpr6Expr5(pexpr6Node2);
        }
	nodeList.add(pexpr5Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new47() /* reduce ANonExpr6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr6 pexpr6Node1;
        {
            // Block
        TNon tnonNode2;
        PExpr7 pexpr7Node3;
        tnonNode2 = (TNon)nodeArrayList1.get(0);
        pexpr7Node3 = (PExpr7)nodeArrayList2.get(0);

        pexpr6Node1 = new ANonExpr6(tnonNode2, pexpr7Node3);
        }
	nodeList.add(pexpr6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new48() /* reduce APart2Expr6 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr6 pexpr6Node1;
        {
            // Block
        PExpr7 pexpr7Node2;
        pexpr7Node2 = (PExpr7)nodeArrayList1.get(0);

        pexpr6Node1 = new APart2Expr6(pexpr7Node2);
        }
	nodeList.add(pexpr6Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new49() /* reduce AExprentreparenthesesExpr7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr7 pexpr7Node1;
        {
            // Block
        TParentheseo tparentheseoNode2;
        PExpr pexprNode3;
        TParenthesef tparenthesefNode4;
        tparentheseoNode2 = (TParentheseo)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);
        tparenthesefNode4 = (TParenthesef)nodeArrayList3.get(0);

        pexpr7Node1 = new AExprentreparenthesesExpr7(tparentheseoNode2, pexprNode3, tparenthesefNode4);
        }
	nodeList.add(pexpr7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new50() /* reduce ANomvarExpr7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr7 pexpr7Node1;
        {
            // Block
        TNom tnomNode2;
        tnomNode2 = (TNom)nodeArrayList1.get(0);

        pexpr7Node1 = new ANomvarExpr7(tnomNode2);
        }
	nodeList.add(pexpr7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new51() /* reduce ANombreExpr7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr7 pexpr7Node1;
        {
            // Block
        TNombre tnombreNode2;
        tnombreNode2 = (TNombre)nodeArrayList1.get(0);

        pexpr7Node1 = new ANombreExpr7(tnombreNode2);
        }
	nodeList.add(pexpr7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new52() /* reduce ALireExpr7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr7 pexpr7Node1;
        {
            // Block
        PFonctionlire pfonctionlireNode2;
        pfonctionlireNode2 = (PFonctionlire)nodeArrayList1.get(0);

        pexpr7Node1 = new ALireExpr7(pfonctionlireNode2);
        }
	nodeList.add(pexpr7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new53() /* reduce ATabExpr7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr7 pexpr7Node1;
        {
            // Block
        TNom tnomNode2;
        TCrocheto tcrochetoNode3;
        TNombre tnombreNode4;
        TCrochetf tcrochetfNode5;
        tnomNode2 = (TNom)nodeArrayList1.get(0);
        tcrochetoNode3 = (TCrocheto)nodeArrayList2.get(0);
        tnombreNode4 = (TNombre)nodeArrayList3.get(0);
        tcrochetfNode5 = (TCrochetf)nodeArrayList4.get(0);

        pexpr7Node1 = new ATabExpr7(tnomNode2, tcrochetoNode3, tnombreNode4, tcrochetfNode5);
        }
	nodeList.add(pexpr7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new54() /* reduce AFonctionExpr7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr7 pexpr7Node1;
        {
            // Block
        PDeffonction pdeffonctionNode2;
        pdeffonctionNode2 = (PDeffonction)nodeArrayList1.get(0);

        pexpr7Node1 = new AFonctionExpr7(pdeffonctionNode2);
        }
	nodeList.add(pexpr7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new55() /* reduce AAppelExpr7 */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PExpr7 pexpr7Node1;
        {
            // Block
        PFonctionappel pfonctionappelNode2;
        pfonctionappelNode2 = (PFonctionappel)nodeArrayList1.get(0);

        pexpr7Node1 = new AAppelExpr7(pfonctionappelNode2);
        }
	nodeList.add(pexpr7Node1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new56() /* reduce AFonctionecrire */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList5 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFonctionecrire pfonctionecrireNode1;
        {
            // Block
        TEcrire tecrireNode2;
        TParentheseo tparentheseoNode3;
        PExpr pexprNode4;
        TParenthesef tparenthesefNode5;
        TPointvirgule tpointvirguleNode6;
        tecrireNode2 = (TEcrire)nodeArrayList1.get(0);
        tparentheseoNode3 = (TParentheseo)nodeArrayList2.get(0);
        pexprNode4 = (PExpr)nodeArrayList3.get(0);
        tparenthesefNode5 = (TParenthesef)nodeArrayList4.get(0);
        tpointvirguleNode6 = (TPointvirgule)nodeArrayList5.get(0);

        pfonctionecrireNode1 = new AFonctionecrire(tecrireNode2, tparentheseoNode3, pexprNode4, tparenthesefNode5, tpointvirguleNode6);
        }
	nodeList.add(pfonctionecrireNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new57() /* reduce AFonctionappel */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList4 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFonctionappel pfonctionappelNode1;
        {
            // Block
        TNom tnomNode2;
        TParentheseo tparentheseoNode3;
        PAppelexpr pappelexprNode4;
        TParenthesef tparenthesefNode5;
        tnomNode2 = (TNom)nodeArrayList1.get(0);
        tparentheseoNode3 = (TParentheseo)nodeArrayList2.get(0);
        pappelexprNode4 = (PAppelexpr)nodeArrayList3.get(0);
        tparenthesefNode5 = (TParenthesef)nodeArrayList4.get(0);

        pfonctionappelNode1 = new AFonctionappel(tnomNode2, tparentheseoNode3, pappelexprNode4, tparenthesefNode5);
        }
	nodeList.add(pfonctionappelNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new58() /* reduce AAppelexpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PAppelexpr pappelexprNode1;
        {
            // Block
        PExpr pexprNode2;
        PListeexpr plisteexprNode3;
        pexprNode2 = (PExpr)nodeArrayList1.get(0);
        plisteexprNode3 = (PListeexpr)nodeArrayList2.get(0);

        pappelexprNode1 = new AAppelexpr(pexprNode2, plisteexprNode3);
        }
	nodeList.add(pappelexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new59() /* reduce AListeexpr */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PListeexpr plisteexprNode1;
        {
            // Block
        TVirgule tvirguleNode2;
        PExpr pexprNode3;
        tvirguleNode2 = (TVirgule)nodeArrayList1.get(0);
        pexprNode3 = (PExpr)nodeArrayList2.get(0);

        plisteexprNode1 = new AListeexpr(tvirguleNode2, pexprNode3);
        }
	nodeList.add(plisteexprNode1);
        return nodeList;
    }



    @SuppressWarnings({ "unchecked", "rawtypes" })
    ArrayList<Object> new60() /* reduce AFonctionlire */
    {
        @SuppressWarnings("hiding") ArrayList<Object> nodeList = new ArrayList<Object>();

        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList3 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList2 = pop();
        @SuppressWarnings("unused") ArrayList<Object> nodeArrayList1 = pop();
        PFonctionlire pfonctionlireNode1;
        {
            // Block
        TLire tlireNode2;
        TParentheseo tparentheseoNode3;
        TParenthesef tparenthesefNode4;
        tlireNode2 = (TLire)nodeArrayList1.get(0);
        tparentheseoNode3 = (TParentheseo)nodeArrayList2.get(0);
        tparenthesefNode4 = (TParenthesef)nodeArrayList3.get(0);

        pfonctionlireNode1 = new AFonctionlire(tlireNode2, tparentheseoNode3, tparenthesefNode4);
        }
	nodeList.add(pfonctionlireNode1);
        return nodeList;
    }



    private static int[][][] actionTable;
/*      {
			{{-1, REDUCE, 15}, {0, SHIFT, 1}, },
			{{-1, ERROR, 1}, {28, SHIFT, 8}, },
			{{-1, ERROR, 2}, {29, ACCEPT, -1}, },
			{{-1, REDUCE, 16}, },
			{{-1, REDUCE, 7}, {17, SHIFT, 9}, },
			{{-1, REDUCE, 2}, },
			{{-1, REDUCE, 3}, },
			{{-1, REDUCE, 12}, {28, SHIFT, 11}, },
			{{-1, REDUCE, 4}, {10, SHIFT, 14}, },
			{{-1, ERROR, 9}, {0, SHIFT, 1}, },
			{{-1, ERROR, 10}, {16, SHIFT, 16}, },
			{{-1, ERROR, 11}, {14, SHIFT, 17}, },
			{{-1, REDUCE, 0}, },
			{{-1, REDUCE, 12}, {28, SHIFT, 11}, },
			{{-1, ERROR, 14}, {9, SHIFT, 19}, {14, SHIFT, 20}, {24, SHIFT, 21}, {27, SHIFT, 22}, {28, SHIFT, 23}, },
			{{-1, REDUCE, 7}, {17, SHIFT, 9}, },
			{{-1, REDUCE, 1}, },
			{{-1, ERROR, 17}, {0, SHIFT, 1}, {15, SHIFT, 35}, },
			{{-1, REDUCE, 11}, },
			{{-1, ERROR, 19}, {14, SHIFT, 20}, {24, SHIFT, 21}, {27, SHIFT, 22}, {28, SHIFT, 23}, },
			{{-1, ERROR, 20}, {9, SHIFT, 19}, {14, SHIFT, 20}, {24, SHIFT, 21}, {27, SHIFT, 22}, {28, SHIFT, 23}, },
			{{-1, ERROR, 21}, {14, SHIFT, 40}, },
			{{-1, REDUCE, 51}, },
			{{-1, REDUCE, 50}, {10, SHIFT, 41}, {14, SHIFT, 42}, },
			{{-1, REDUCE, 54}, },
			{{-1, ERROR, 25}, {8, SHIFT, 43}, {11, SHIFT, 44}, },
			{{-1, REDUCE, 35}, {7, SHIFT, 45}, },
			{{-1, REDUCE, 37}, {5, SHIFT, 46}, {6, SHIFT, 47}, },
			{{-1, REDUCE, 40}, {1, SHIFT, 48}, {2, SHIFT, 49}, },
			{{-1, REDUCE, 43}, {3, SHIFT, 50}, {4, SHIFT, 51}, },
			{{-1, REDUCE, 46}, },
			{{-1, REDUCE, 48}, },
			{{-1, REDUCE, 55}, },
			{{-1, REDUCE, 52}, },
			{{-1, REDUCE, 6}, },
			{{-1, REDUCE, 15}, {0, SHIFT, 1}, },
			{{-1, REDUCE, 7}, {17, SHIFT, 9}, },
			{{-1, ERROR, 37}, {15, SHIFT, 54}, },
			{{-1, REDUCE, 47}, },
			{{-1, ERROR, 39}, {8, SHIFT, 43}, {15, SHIFT, 55}, },
			{{-1, ERROR, 40}, {15, SHIFT, 56}, },
			{{-1, ERROR, 41}, {27, SHIFT, 57}, },
			{{-1, ERROR, 42}, {0, SHIFT, 1}, {9, SHIFT, 19}, {14, SHIFT, 20}, {15, SHIFT, 35}, {24, SHIFT, 21}, {27, SHIFT, 22}, {28, SHIFT, 23}, },
			{{-1, ERROR, 43}, {9, SHIFT, 19}, {14, SHIFT, 20}, {24, SHIFT, 21}, {27, SHIFT, 22}, {28, SHIFT, 23}, },
			{{-1, REDUCE, 5}, },
			{{-1, ERROR, 45}, {9, SHIFT, 19}, {14, SHIFT, 20}, {24, SHIFT, 21}, {27, SHIFT, 22}, {28, SHIFT, 23}, },
			{{-1, ERROR, 46}, {9, SHIFT, 19}, {14, SHIFT, 20}, {24, SHIFT, 21}, {27, SHIFT, 22}, {28, SHIFT, 23}, },
			{{-1, ERROR, 47}, {9, SHIFT, 19}, {14, SHIFT, 20}, {24, SHIFT, 21}, {27, SHIFT, 22}, {28, SHIFT, 23}, },
			{{-1, ERROR, 48}, {9, SHIFT, 19}, {14, SHIFT, 20}, {24, SHIFT, 21}, {27, SHIFT, 22}, {28, SHIFT, 23}, },
			{{-1, ERROR, 49}, {9, SHIFT, 19}, {14, SHIFT, 20}, {24, SHIFT, 21}, {27, SHIFT, 22}, {28, SHIFT, 23}, },
			{{-1, ERROR, 50}, {9, SHIFT, 19}, {14, SHIFT, 20}, {24, SHIFT, 21}, {27, SHIFT, 22}, {28, SHIFT, 23}, },
			{{-1, ERROR, 51}, {9, SHIFT, 19}, {14, SHIFT, 20}, {24, SHIFT, 21}, {27, SHIFT, 22}, {28, SHIFT, 23}, },
			{{-1, ERROR, 52}, {12, SHIFT, 68}, },
			{{-1, REDUCE, 8}, },
			{{-1, REDUCE, 15}, {0, SHIFT, 1}, },
			{{-1, REDUCE, 49}, },
			{{-1, REDUCE, 60}, },
			{{-1, ERROR, 57}, {11, SHIFT, 71}, },
			{{-1, ERROR, 58}, {8, SHIFT, 43}, {17, SHIFT, 72}, },
			{{-1, ERROR, 59}, {15, SHIFT, 74}, },
			{{-1, REDUCE, 34}, {7, SHIFT, 45}, },
			{{-1, REDUCE, 36}, {5, SHIFT, 46}, {6, SHIFT, 47}, },
			{{-1, REDUCE, 39}, {1, SHIFT, 48}, {2, SHIFT, 49}, },
			{{-1, REDUCE, 38}, {1, SHIFT, 48}, {2, SHIFT, 49}, },
			{{-1, REDUCE, 41}, {3, SHIFT, 50}, {4, SHIFT, 51}, },
			{{-1, REDUCE, 42}, {3, SHIFT, 50}, {4, SHIFT, 51}, },
			{{-1, REDUCE, 44}, },
			{{-1, REDUCE, 45}, },
			{{-1, REDUCE, 18}, {12, SHIFT, 68}, {18, SHIFT, 75}, {21, SHIFT, 76}, {22, SHIFT, 77}, {25, SHIFT, 78}, {28, SHIFT, 79}, },
			{{-1, REDUCE, 14}, },
			{{-1, ERROR, 70}, {12, SHIFT, 68}, },
			{{-1, REDUCE, 53}, },
			{{-1, ERROR, 72}, {9, SHIFT, 19}, {14, SHIFT, 20}, {24, SHIFT, 21}, {27, SHIFT, 22}, {28, SHIFT, 23}, },
			{{-1, REDUCE, 58}, },
			{{-1, REDUCE, 57}, },
			{{-1, ERROR, 75}, {9, SHIFT, 19}, {14, SHIFT, 20}, {24, SHIFT, 21}, {27, SHIFT, 22}, {28, SHIFT, 23}, },
			{{-1, ERROR, 76}, {9, SHIFT, 19}, {14, SHIFT, 20}, {24, SHIFT, 21}, {27, SHIFT, 22}, {28, SHIFT, 23}, },
			{{-1, ERROR, 77}, {9, SHIFT, 19}, {14, SHIFT, 20}, {24, SHIFT, 21}, {27, SHIFT, 22}, {28, SHIFT, 23}, },
			{{-1, ERROR, 78}, {14, SHIFT, 94}, },
			{{-1, REDUCE, 32}, {10, SHIFT, 95}, },
			{{-1, ERROR, 80}, {13, SHIFT, 96}, },
			{{-1, REDUCE, 18}, {12, SHIFT, 68}, {18, SHIFT, 75}, {21, SHIFT, 76}, {22, SHIFT, 77}, {25, SHIFT, 78}, {28, SHIFT, 79}, },
			{{-1, REDUCE, 21}, },
			{{-1, REDUCE, 23}, },
			{{-1, REDUCE, 22}, },
			{{-1, REDUCE, 20}, },
			{{-1, REDUCE, 19}, },
			{{-1, ERROR, 87}, {6, SHIFT, 98}, },
			{{-1, REDUCE, 24}, },
			{{-1, REDUCE, 13}, },
			{{-1, REDUCE, 59}, {8, SHIFT, 43}, },
			{{-1, ERROR, 91}, {8, SHIFT, 43}, {19, SHIFT, 99}, },
			{{-1, ERROR, 92}, {8, SHIFT, 43}, {16, SHIFT, 100}, },
			{{-1, ERROR, 93}, {8, SHIFT, 43}, {23, SHIFT, 101}, },
			{{-1, ERROR, 94}, {9, SHIFT, 19}, {14, SHIFT, 20}, {24, SHIFT, 21}, {27, SHIFT, 22}, {28, SHIFT, 23}, },
			{{-1, ERROR, 95}, {9, SHIFT, 19}, {14, SHIFT, 20}, {24, SHIFT, 21}, {27, SHIFT, 22}, {28, SHIFT, 23}, },
			{{-1, REDUCE, 30}, },
			{{-1, REDUCE, 17}, },
			{{-1, ERROR, 98}, {9, SHIFT, 19}, {14, SHIFT, 20}, {24, SHIFT, 21}, {27, SHIFT, 22}, {28, SHIFT, 23}, },
			{{-1, ERROR, 99}, {12, SHIFT, 68}, },
			{{-1, REDUCE, 26}, },
			{{-1, ERROR, 101}, {12, SHIFT, 68}, },
			{{-1, ERROR, 102}, {8, SHIFT, 43}, {15, SHIFT, 107}, },
			{{-1, ERROR, 103}, {8, SHIFT, 43}, {11, SHIFT, 108}, },
			{{-1, ERROR, 104}, {8, SHIFT, 43}, {16, SHIFT, 109}, },
			{{-1, REDUCE, 28}, {20, SHIFT, 110}, },
			{{-1, REDUCE, 25}, },
			{{-1, ERROR, 107}, {16, SHIFT, 112}, },
			{{-1, REDUCE, 33}, },
			{{-1, REDUCE, 31}, },
			{{-1, ERROR, 110}, {12, SHIFT, 68}, },
			{{-1, REDUCE, 27}, },
			{{-1, REDUCE, 56}, },
			{{-1, REDUCE, 29}, },
        };*/
    private static int[][][] gotoTable;
/*      {
			{{-1, 2}, },
			{{-1, 3}, },
			{{-1, 4}, {9, 15}, {17, 36}, {42, 36}, },
			{{-1, 5}, },
			{{-1, 6}, },
			{{-1, 10}, {15, 34}, {36, 53}, },
			{{-1, 37}, },
			{{-1, -1}, },
			{{-1, 12}, {13, 18}, },
			{{-1, 24}, {7, 13}, {13, 13}, },
			{{-1, 7}, {35, 52}, {54, 70}, },
			{{-1, 80}, {81, 97}, },
			{{-1, 81}, },
			{{-1, 82}, },
			{{-1, 83}, },
			{{-1, 84}, },
			{{-1, 111}, },
			{{-1, 85}, {52, 69}, {70, 89}, {99, 105}, {101, 106}, {110, 113}, },
			{{-1, 86}, },
			{{-1, 87}, },
			{{-1, 25}, {20, 39}, {42, 58}, {72, 90}, {75, 91}, {76, 92}, {77, 93}, {94, 102}, {95, 103}, {98, 104}, },
			{{-1, 26}, {43, 60}, },
			{{-1, 27}, {45, 61}, },
			{{-1, 28}, {46, 62}, {47, 63}, },
			{{-1, 29}, {48, 64}, {49, 65}, },
			{{-1, 30}, {50, 66}, {51, 67}, },
			{{-1, 31}, {19, 38}, },
			{{-1, 88}, },
			{{-1, 32}, },
			{{-1, 59}, },
			{{-1, 73}, },
			{{-1, 33}, },
        };*/
    private static String[] errorMessages;
/*      {
			"expecting: 'entier ', nom, EOF",
			"expecting: nom",
			"expecting: EOF",
			"expecting: '{', nom, EOF",
			"expecting: ';', ','",
			"expecting: ')', ';', ','",
			"expecting: nom, EOF",
			"expecting: '[', ')', ';', ','",
			"expecting: 'entier '",
			"expecting: ';'",
			"expecting: '('",
			"expecting: '!', '(', 'lire', nombre, nom",
			"expecting: 'entier ', ')'",
			"expecting: '(', 'lire', nombre, nom",
			"expecting: '+', '-', '*', '/', '<', '=', '&', '|', ']', ')', ';', ',', 'alors', 'faire'",
			"expecting: '+', '-', '*', '/', '<', '=', '&', '|', '[', ']', '(', ')', ';', ',', 'alors', 'faire'",
			"expecting: '|', ']'",
			"expecting: '&', '|', ']', ')', ';', ',', 'alors', 'faire'",
			"expecting: '<', '=', '&', '|', ']', ')', ';', ',', 'alors', 'faire'",
			"expecting: '+', '-', '<', '=', '&', '|', ']', ')', ';', ',', 'alors', 'faire'",
			"expecting: ')', ';'",
			"expecting: 'entier ', '{'",
			"expecting: ')', ','",
			"expecting: ')'",
			"expecting: '|', ')'",
			"expecting: nombre",
			"expecting: 'entier ', '!', '(', ')', 'lire', nombre, nom",
			"expecting: '{'",
			"expecting: ']'",
			"expecting: '|', ','",
			"expecting: '{', '}', 'si', 'retour', 'tantque', 'ecrire', nom",
			"expecting: '+', '-', '*', '/', '<', '=', '&', '|', ']', ')', ';', ',', 'alors', 'faire', nom, EOF",
			"expecting: '=', '['",
			"expecting: '}'",
			"expecting: '='",
			"expecting: '|', 'alors'",
			"expecting: '|', ';'",
			"expecting: '|', 'faire'",
			"expecting: '+', '-', '*', '/', '<', '=', '&', '|', ']', '{', '}', ')', ';', ',', 'si', 'alors', 'sinon', 'retour', 'tantque', 'faire', 'ecrire', nom, EOF",
			"expecting: '{', '}', 'si', 'sinon', 'retour', 'tantque', 'ecrire', nom",
        };*/
    private static int[] errors;
/*      {
			0, 1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 10, 2, 6, 11, 5, 3, 12, 2, 13, 11, 10, 14, 15, 14, 16, 17, 18, 19, 14, 14, 14, 14, 14, 20, 21, 22, 23, 14, 24, 23, 25, 26, 11, 5, 11, 11, 11, 11, 11, 11, 11, 27, 23, 21, 14, 14, 28, 29, 23, 17, 18, 19, 19, 14, 14, 14, 14, 30, 31, 27, 14, 11, 23, 14, 11, 11, 11, 10, 32, 33, 30, 30, 30, 30, 30, 30, 34, 30, 31, 24, 35, 36, 37, 11, 11, 38, 33, 11, 27, 30, 27, 24, 16, 36, 39, 30, 9, 34, 30, 27, 30, 30, 30, 
        };*/

    static 
    {
        try
        {
            DataInputStream s = new DataInputStream(
                new BufferedInputStream(
                Parser.class.getResourceAsStream("parser.dat")));

            // read actionTable
            int length = s.readInt();
            Parser.actionTable = new int[length][][];
            for(int i = 0; i < Parser.actionTable.length; i++)
            {
                length = s.readInt();
                Parser.actionTable[i] = new int[length][3];
                for(int j = 0; j < Parser.actionTable[i].length; j++)
                {
                for(int k = 0; k < 3; k++)
                {
                    Parser.actionTable[i][j][k] = s.readInt();
                }
                }
            }

            // read gotoTable
            length = s.readInt();
            gotoTable = new int[length][][];
            for(int i = 0; i < gotoTable.length; i++)
            {
                length = s.readInt();
                gotoTable[i] = new int[length][2];
                for(int j = 0; j < gotoTable[i].length; j++)
                {
                for(int k = 0; k < 2; k++)
                {
                    gotoTable[i][j][k] = s.readInt();
                }
                }
            }

            // read errorMessages
            length = s.readInt();
            errorMessages = new String[length];
            for(int i = 0; i < errorMessages.length; i++)
            {
                length = s.readInt();
                StringBuffer buffer = new StringBuffer();

                for(int j = 0; j < length; j++)
                {
                buffer.append(s.readChar());
                }
                errorMessages[i] = buffer.toString();
            }

            // read errors
            length = s.readInt();
            errors = new int[length];
            for(int i = 0; i < errors.length; i++)
            {
                errors[i] = s.readInt();
            }

            s.close();
        }
        catch(Exception e)
        {
            throw new RuntimeException("The file \"parser.dat\" is either missing or corrupted.");
        }
    }
}
