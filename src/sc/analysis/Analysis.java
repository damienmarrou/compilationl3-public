/* This file was generated by SableCC (http://www.sablecc.org/). */

package sc.analysis;

import sc.node.*;

public interface Analysis extends Switch
{
    Object getIn(Node node);
    void setIn(Node node, Object o);
    Object getOut(Node node);
    void setOut(Node node, Object o);

    void caseStart(Start node);
    void caseAProgramme(AProgramme node);
    void caseADecvar(ADecvar node);
    void caseAEntierVarsimple(AEntierVarsimple node);
    void caseATabVarsimple(ATabVarsimple node);
    void caseAVarent(AVarent node);
    void caseAVartab(AVartab node);
    void caseAVarmultiple(AVarmultiple node);
    void caseARienVarmultiple(ARienVarmultiple node);
    void caseAMultipleFctdecvar(AMultipleFctdecvar node);
    void caseAFctvarmultiple(AFctvarmultiple node);
    void caseARienFctvarmultiple(ARienFctvarmultiple node);
    void caseAFoncDeffonction2(AFoncDeffonction2 node);
    void caseARienDeffonction2(ARienDeffonction2 node);
    void caseAArgsDeffonction(AArgsDeffonction node);
    void caseASansargDeffonction(ASansargDeffonction node);
    void caseARienDecvar2(ARienDecvar2 node);
    void caseAVarDecvar2(AVarDecvar2 node);
    void caseAListListinstr(AListListinstr node);
    void caseARienListinstr(ARienListinstr node);
    void caseAAffectationInstr(AAffectationInstr node);
    void caseABlocInstr(ABlocInstr node);
    void caseATantqueInstr(ATantqueInstr node);
    void caseASiInstr(ASiInstr node);
    void caseARetourInstr(ARetourInstr node);
    void caseAEcrireInstr(AEcrireInstr node);
    void caseALireInstr(ALireInstr node);
    void caseAAppelInstr(AAppelInstr node);
    void caseAInstrtantque(AInstrtantque node);
    void caseAInstrretour(AInstrretour node);
    void caseASisinonInstrsi(ASisinonInstrsi node);
    void caseASiInstrsi(ASiInstrsi node);
    void caseAInstrsinon(AInstrsinon node);
    void caseABloc(ABloc node);
    void caseAOuExpr(AOuExpr node);
    void caseAExpr2Expr(AExpr2Expr node);
    void caseAEtExpr2(AEtExpr2 node);
    void caseAExpr3Expr2(AExpr3Expr2 node);
    void caseAEgalExpr3(AEgalExpr3 node);
    void caseAInfExpr3(AInfExpr3 node);
    void caseAExpr4Expr3(AExpr4Expr3 node);
    void caseAPlusExpr4(APlusExpr4 node);
    void caseAMoinsExpr4(AMoinsExpr4 node);
    void caseAExpr5Expr4(AExpr5Expr4 node);
    void caseAMultiExpr5(AMultiExpr5 node);
    void caseADivExpr5(ADivExpr5 node);
    void caseAExpr6Expr5(AExpr6Expr5 node);
    void caseANonExpr6(ANonExpr6 node);
    void caseAPart7Expr6(APart7Expr6 node);
    void caseAExprentreparenthesesExpr7(AExprentreparenthesesExpr7 node);
    void caseAVarExpr7(AVarExpr7 node);
    void caseANombreExpr7(ANombreExpr7 node);
    void caseALireExpr7(ALireExpr7 node);
    void caseAFonctionExpr7(AFonctionExpr7 node);
    void caseAAppelExpr7(AAppelExpr7 node);
    void caseAAffect(AAffect node);
    void caseASimpleVariable(ASimpleVariable node);
    void caseATabVariable(ATabVariable node);
    void caseAFonctionecrire(AFonctionecrire node);
    void caseAAvecargsFonctionappel(AAvecargsFonctionappel node);
    void caseASansargFonctionappel(ASansargFonctionappel node);
    void caseAAppelexpr(AAppelexpr node);
    void caseAListeexpr(AListeexpr node);
    void caseARienListeexpr(ARienListeexpr node);
    void caseAFonctionlire(AFonctionlire node);

    void caseTTypeentier(TTypeentier node);
    void caseTPlus(TPlus node);
    void caseTMoins(TMoins node);
    void caseTMulti(TMulti node);
    void caseTDiv(TDiv node);
    void caseTInf(TInf node);
    void caseTEgal(TEgal node);
    void caseTEt(TEt node);
    void caseTOu(TOu node);
    void caseTNon(TNon node);
    void caseTCrocheto(TCrocheto node);
    void caseTCrochetf(TCrochetf node);
    void caseTAccoladeo(TAccoladeo node);
    void caseTAccoladef(TAccoladef node);
    void caseTParentheseo(TParentheseo node);
    void caseTParenthesef(TParenthesef node);
    void caseTPointvirgule(TPointvirgule node);
    void caseTVirgule(TVirgule node);
    void caseTEspaces(TEspaces node);
    void caseTSi(TSi node);
    void caseTAlors(TAlors node);
    void caseTSinon(TSinon node);
    void caseTRetour(TRetour node);
    void caseTTantque(TTantque node);
    void caseTFaire(TFaire node);
    void caseTLire(TLire node);
    void caseTEcrire(TEcrire node);
    void caseTFonction(TFonction node);
    void caseTCommentaire(TCommentaire node);
    void caseTNombre(TNombre node);
    void caseTNom(TNom node);
    void caseEOF(EOF node);
    void caseInvalidToken(InvalidToken node);
}
